//////////////////////////////////////////////////////////////////////////////
// Name:        SVGFETurbulenceElement.h
// Author:      Alex Thuering
// Copyright:   (c) 2005 Alex Thuering
// Licence:     wxWindows licence
// Notes:       generated by generate.py
//////////////////////////////////////////////////////////////////////////////

#ifndef WX_SVG_FE_TURBULENCE_ELEMENT_H
#define WX_SVG_FE_TURBULENCE_ELEMENT_H

#include "SVGElement.h"
#include "SVGFilterPrimitiveStandardAttributes.h"
#include "SVGAnimatedNumber.h"
#include "SVGAnimatedInteger.h"
#include "SVGAnimatedEnumeration.h"
#include "String.h"


enum wxSVG_TURBULENCE_TYPE
{
  wxSVG_TURBULENCE_TYPE_UNKNOWN = 0,
  wxSVG_TURBULENCE_TYPE_FRACTALNOISE = 1,
  wxSVG_TURBULENCE_TYPE_TURBULENCE = 2
};


enum wxSVG_STITCHTYPE
{
  wxSVG_STITCHTYPE_UNKNOWN = 0,
  wxSVG_STITCHTYPE_STITCH = 1,
  wxSVG_STITCHTYPE_NOSTITCH = 2
};

class wxSVGFETurbulenceElement:
  public wxSVGElement,
  public wxSVGFilterPrimitiveStandardAttributes
{
  protected:
	wxSVGAnimatedNumber m_baseFrequencyX;
	wxSVGAnimatedNumber m_baseFrequencyY;
	wxSVGAnimatedInteger m_numOctaves;
	wxSVGAnimatedNumber m_seed;
	wxSVGAnimatedEnumeration m_stitchTiles;
	wxSVGAnimatedEnumeration m_type;

  public:
	inline float GetBaseFrequencyX() const { return m_baseFrequencyX.GetBaseVal(); }
	inline void SetBaseFrequencyX(const float n) { m_baseFrequencyX.GetBaseVal() = n; }

	inline float GetBaseFrequencyY() const { return m_baseFrequencyY.GetBaseVal(); }
	inline void SetBaseFrequencyY(const float n) { m_baseFrequencyY.GetBaseVal() = n; }

	inline long GetNumOctaves() const { return m_numOctaves.GetBaseVal(); }
	inline void SetNumOctaves(const long n) { m_numOctaves.GetBaseVal() = n; }

	inline float GetSeed() const { return m_seed.GetBaseVal(); }
	inline void SetSeed(const float n) { m_seed.GetBaseVal() = n; }

	inline char GetStitchTiles() const { return m_stitchTiles.GetBaseVal(); }
	inline void SetStitchTiles(const char n) { m_stitchTiles.GetBaseVal() = n; }

	inline char GetType() const { return m_type.GetBaseVal(); }
	inline void SetType(const char n) { m_type.GetBaseVal() = n; }

  public:
	inline float GetAnimatedBaseFrequencyX() const { return m_baseFrequencyX.GetAnimVal(); }
	inline void SetAnimatedBaseFrequencyX(const float n) { m_baseFrequencyX.GetAnimVal() = n; }

	inline float GetAnimatedBaseFrequencyY() const { return m_baseFrequencyY.GetAnimVal(); }
	inline void SetAnimatedBaseFrequencyY(const float n) { m_baseFrequencyY.GetAnimVal() = n; }

	inline long GetAnimatedNumOctaves() const { return m_numOctaves.GetAnimVal(); }
	inline void SetAnimatedNumOctaves(const long n) { m_numOctaves.GetAnimVal() = n; }

	inline float GetAnimatedSeed() const { return m_seed.GetAnimVal(); }
	inline void SetAnimatedSeed(const float n) { m_seed.GetAnimVal() = n; }

	inline char GetAnimatedStitchTiles() const { return m_stitchTiles.GetAnimVal(); }
	inline void SetAnimatedStitchTiles(const char n) { m_stitchTiles.GetAnimVal() = n; }

	inline char GetAnimatedType() const { return m_type.GetAnimVal(); }
	inline void SetAnimatedType(const char n) { m_type.GetAnimVal() = n; }

  public:
	wxSVGFETurbulenceElement(wxSVGDocument* doc, wxString tagName = wxT("feTurbulence")):
	  wxSVGElement(doc, tagName) {}
	virtual ~wxSVGFETurbulenceElement() {}
	bool SetAttribute(const wxString& name, const wxString& value);
	virtual const wxSVGDTD GetDtd() const { return wxSVG_FETURBULENCE_ELEMENT; }
};

#endif // WX_SVG_FE_TURBULENCE_ELEMENT_H
